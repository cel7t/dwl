/* Generated by wayland-scanner 1.22.0 */

#ifndef NET_TAPESOFTWARE_DWL_WM_UNSTABLE_V1_SERVER_PROTOCOL_H
#define NET_TAPESOFTWARE_DWL_WM_UNSTABLE_V1_SERVER_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-server.h"

#ifdef  __cplusplus
extern "C" {
#endif

struct wl_client;
struct wl_resource;

/**
 * @page page_net_tapesoftware_dwl_wm_unstable_v1 The net_tapesoftware_dwl_wm_unstable_v1 protocol
 * @section page_ifaces_net_tapesoftware_dwl_wm_unstable_v1 Interfaces
 * - @subpage page_iface_znet_tapesoftware_dwl_wm_v1 - control the dwl state
 * - @subpage page_iface_znet_tapesoftware_dwl_wm_monitor_v1 - control one monitor
 * @section page_copyright_net_tapesoftware_dwl_wm_unstable_v1 Copyright
 * <pre>
 *
 * Copyright (c) 2021 Raphael Robatsch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * </pre>
 */
struct wl_output;
struct znet_tapesoftware_dwl_wm_monitor_v1;
struct znet_tapesoftware_dwl_wm_v1;

#ifndef ZNET_TAPESOFTWARE_DWL_WM_V1_INTERFACE
#define ZNET_TAPESOFTWARE_DWL_WM_V1_INTERFACE
/**
 * @page page_iface_znet_tapesoftware_dwl_wm_v1 znet_tapesoftware_dwl_wm_v1
 * @section page_iface_znet_tapesoftware_dwl_wm_v1_desc Description
 *
 * This interface is exposed as a global in the wl_registry.
 *
 * Clients can use this protocol to receive updates of the window manager
 * state (active tags, active layout, and focused window).
 * Clients can also control this state.
 *
 * After binding, the client will receive the available tags and layouts
 * with the 'tag' and 'layout' events. These can be used in subsequent
 * dwl_wm_monitor_v1.set_tags/set_layout requests, and to interpret the
 * dwl_wm_monitor_v1.layout/tag events.
 * @section page_iface_znet_tapesoftware_dwl_wm_v1_api API
 * See @ref iface_znet_tapesoftware_dwl_wm_v1.
 */
/**
 * @defgroup iface_znet_tapesoftware_dwl_wm_v1 The znet_tapesoftware_dwl_wm_v1 interface
 *
 * This interface is exposed as a global in the wl_registry.
 *
 * Clients can use this protocol to receive updates of the window manager
 * state (active tags, active layout, and focused window).
 * Clients can also control this state.
 *
 * After binding, the client will receive the available tags and layouts
 * with the 'tag' and 'layout' events. These can be used in subsequent
 * dwl_wm_monitor_v1.set_tags/set_layout requests, and to interpret the
 * dwl_wm_monitor_v1.layout/tag events.
 */
extern const struct wl_interface znet_tapesoftware_dwl_wm_v1_interface;
#endif
#ifndef ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_INTERFACE
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_INTERFACE
/**
 * @page page_iface_znet_tapesoftware_dwl_wm_monitor_v1 znet_tapesoftware_dwl_wm_monitor_v1
 * @section page_iface_znet_tapesoftware_dwl_wm_monitor_v1_desc Description
 *
 * Observes and controls one monitor.
 *
 * Events are double-buffered: Clients should cache all events and only
 * redraw themselves once the 'frame' event is sent.
 *
 * Requests are not double-buffered: The compositor will update itself
 * immediately.
 * @section page_iface_znet_tapesoftware_dwl_wm_monitor_v1_api API
 * See @ref iface_znet_tapesoftware_dwl_wm_monitor_v1.
 */
/**
 * @defgroup iface_znet_tapesoftware_dwl_wm_monitor_v1 The znet_tapesoftware_dwl_wm_monitor_v1 interface
 *
 * Observes and controls one monitor.
 *
 * Events are double-buffered: Clients should cache all events and only
 * redraw themselves once the 'frame' event is sent.
 *
 * Requests are not double-buffered: The compositor will update itself
 * immediately.
 */
extern const struct wl_interface znet_tapesoftware_dwl_wm_monitor_v1_interface;
#endif

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 * @struct znet_tapesoftware_dwl_wm_v1_interface
 */
struct znet_tapesoftware_dwl_wm_v1_interface {
	/**
	 * release dwl_wm
	 *
	 * This request indicates that the client will not use the dwl_wm
	 * object any more. Objects that have been created through this
	 * instance are not affected.
	 */
	void (*release)(struct wl_client *client,
			struct wl_resource *resource);
	/**
	 * gets a dwl monitor from an output
	 *
	 * Gets a dwl monitor for the specified output. The window
	 * manager state on the output can be controlled using the monitor.
	 */
	void (*get_monitor)(struct wl_client *client,
			    struct wl_resource *resource,
			    uint32_t id,
			    struct wl_resource *output);
};

#define ZNET_TAPESOFTWARE_DWL_WM_V1_TAG 0
#define ZNET_TAPESOFTWARE_DWL_WM_V1_LAYOUT 1

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_V1_TAG_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_V1_LAYOUT_SINCE_VERSION 1

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_V1_RELEASE_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_V1_GET_MONITOR_SINCE_VERSION 1

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 * Sends an tag event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
znet_tapesoftware_dwl_wm_v1_send_tag(struct wl_resource *resource_, const char *name)
{
	wl_resource_post_event(resource_, ZNET_TAPESOFTWARE_DWL_WM_V1_TAG, name);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 * Sends an layout event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
znet_tapesoftware_dwl_wm_v1_send_layout(struct wl_resource *resource_, const char *name)
{
	wl_resource_post_event(resource_, ZNET_TAPESOFTWARE_DWL_WM_V1_LAYOUT, name);
}

#ifndef ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_ENUM
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_ENUM
enum znet_tapesoftware_dwl_wm_monitor_v1_tag_state {
	/**
	 * no state
	 */
	ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_NONE = 0,
	/**
	 * tag is active
	 */
	ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_ACTIVE = 1,
	/**
	 * tag has at least one urgent client
	 */
	ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_URGENT = 2,
};
#endif /* ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_ENUM */

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 * @struct znet_tapesoftware_dwl_wm_monitor_v1_interface
 */
struct znet_tapesoftware_dwl_wm_monitor_v1_interface {
	/**
	 * release dwl_monitor
	 *
	 * This request indicates that the client is done with this
	 * dwl_monitor. All further requests are ignored.
	 */
	void (*release)(struct wl_client *client,
			struct wl_resource *resource);
	/**
	 * sets the active tags on this monitor.
	 *
	 * Changes are applied immediately.
	 * @param tagmask bitmask of the tags that should be set.
	 */
	void (*set_tags)(struct wl_client *client,
			 struct wl_resource *resource,
			 uint32_t tagmask,
			 uint32_t toggle_tagset);
	/**
	 * updates the tags of the focused client.
	 *
	 * tags are updated as follows: new_tags = (current_tags AND
	 * and_tags) XOR xor_tags
	 *
	 * Changes are applied immediately.
	 */
	void (*set_client_tags)(struct wl_client *client,
				struct wl_resource *resource,
				uint32_t and_tags,
				uint32_t xor_tags);
	/**
	 * sets the active layout on this monitor.
	 *
	 * Changes are applied immediately.
	 * @param layout index of a layout received by the dwl_wm_v1.layout event.
	 */
	void (*set_layout)(struct wl_client *client,
			   struct wl_resource *resource,
			   uint32_t layout);
};

#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SELECTED 0
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG 1
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_LAYOUT 2
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TITLE 3
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_FRAME 4

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SELECTED_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_LAYOUT_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TITLE_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_FRAME_SINCE_VERSION 1

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_RELEASE_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_TAGS_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_CLIENT_TAGS_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_LAYOUT_SINCE_VERSION 1

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 * Sends an selected event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_send_selected(struct wl_resource *resource_, uint32_t selected)
{
	wl_resource_post_event(resource_, ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SELECTED, selected);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 * Sends an tag event to the client owning the resource.
 * @param resource_ The client's resource
 * @param tag index of a tag received by the dwl_wm_v1.tag event.
 * @param num_clients number of clients on this tag
 * @param focused_client out of num_clients. -1 if there is no focused client
 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_send_tag(struct wl_resource *resource_, uint32_t tag, uint32_t state, uint32_t num_clients, int32_t focused_client)
{
	wl_resource_post_event(resource_, ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG, tag, state, num_clients, focused_client);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 * Sends an layout event to the client owning the resource.
 * @param resource_ The client's resource
 * @param layout index of a layout received by the dwl_wm_v1.layout event.
 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_send_layout(struct wl_resource *resource_, uint32_t layout)
{
	wl_resource_post_event(resource_, ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_LAYOUT, layout);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 * Sends an title event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_send_title(struct wl_resource *resource_, const char *title)
{
	wl_resource_post_event(resource_, ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TITLE, title);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 * Sends an frame event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_send_frame(struct wl_resource *resource_)
{
	wl_resource_post_event(resource_, ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_FRAME);
}

#ifdef  __cplusplus
}
#endif

#endif
